import xml.etree.ElementTree as ET
from .fromfile import FromFile
from ..entities.packet import PacketFeatures

class XmlPcapParser(FromFile):
    """
    Class parses xml file generated by tshark.
    Extract stats/features up to transport layer.
    """

    def __init__(self, filename):
        self.filename = filename
        self.xmlRoot = ET.parse(filename).getroot()

    def __iter__(self):
        for packet in self.xmlRoot.findall('packet'):
            yield PacketFeatures(self.extractFeaturesFromPacket(packet))

    def getPackets(self):
        """
        Gets all packet features from.
        :return: packet list
        """
        packets = []

        for packet in self.xmlRoot.findall('packet'):
            packets.append(PacketFeatures(self.__extractFeaturesFromPacket(packet)))

        return packets


    def __extractFeaturesFromPacket(self, packet):
        resPacket = {}

        for layerHeader in packet.findall('proto'):
            if layerHeader.attrib['name'] == 'geninfo':
                resPacket['packet'] = self.__extractFeaturesFromPcapPacketHeader(layerHeader)

            elif layerHeader.attrib['name'] == 'frame':
                #todo
                pass

            elif layerHeader.attrib['name'] == 'eth':
                resPacket['link'] = self.__extractFeaturesFromLink(layerHeader)

            elif layerHeader.attrib['name'] == 'ip':
                resPacket['network'] = self.__extractFeaturesFromNetwork(layerHeader)

            elif layerHeader.attrib['name'] == 'tcp':
                resPacket['transport'] = {}
                resPacket['transport']['proto'] = 'tcp'
                resPacket['transport']['info'] =  self.__extractFeaturesFromTcp(layerHeader)

            elif layerHeader.attrib['name'] == 'udp':
                resPacket['transport'] = {}
                resPacket['transport']['proto'] = 'udp'
                resPacket['transport']['info'] = self.__extractFeaturesFromUdp(layerHeader)

            else:
                self.__extractFeaturesFromPayload(layerHeader, resPacket)

        if 'payload' not in resPacket.keys():
            resPacket['payload'] = {'size': 0}


        return resPacket

    def __extractFeaturesFromPcapPacketHeader(self, header):
        packet = {}
        packet['size'] = int(header.attrib['size'])

        for field in header.findall('field'):
            if field.attrib['name'] == 'timestamp':
                packet['timestamp'] = float(field.attrib['value'])

            if field.attrib['name'] == 'num':
                packet['num'] = int(field.attrib['show'])

        return packet

    def __extractFeaturesFromLink(self, header):
        link = {}
        link['size'] = int(header.attrib['size'])

        return link

    def __extractFeaturesFromNetwork(self, header):
        network = {}
        network['size'] = int(header.attrib['size'])

        for field in header.findall('field'):
            if field.attrib['name'] == 'ip.src':
                network['src'] = field.attrib['show']

            if field.attrib['name'] == 'ip.dst':
                network['dst'] = field.attrib['show']

            if field.attrib['name'] == 'version':
                network['version'] = field.attrib['show']

        return network

    def __extractFeaturesFromTcp(self, header):
        tcp = {}
        tcp['size'] = int(header.attrib['size'])

        for field in header.findall('field'):
            if field.attrib['name'] == 'tcp.flags':
                tcp['flags'] = self.__extractTcpFlags(field)

            if field.attrib['name'] == 'tcp.srcport':
                tcp['srcp'] = int(field.attrib['show'])

            if field.attrib['name'] == 'tcp.dstport':
                tcp['dstp'] = int(field.attrib['show'])

            if field.attrib['name'] == 'tcp.seq':
                tcp['seq'] = int(field.attrib['show'])

            if field.attrib['name'] == 'tcp.ack':
                tcp['ack'] = int(field.attrib['show'])

        return tcp

    def __extractFeaturesFromUdp(self, header):
        udp = {}
        udp['size'] = int(header.attrib['size'])

        for field in header.findall('field'):
            if field.attrib['name'] == 'udp.srcport':
                udp['srcp'] = int(field.attrib['show'])

            if field.attrib['name'] == 'udp.dstport':
                udp['dstp'] = int(field.attrib['show'])

        return udp

    def __extractTcpFlags(self, flags):
        tmpFlags = {}

        for tcpflag in flags.findall('field'):
            if tcpflag.attrib['name'] == "tcp.flags.ns":
                tmpFlags['ns'] = int(tcpflag.attrib['value']) if 'value' in tcpflag.attrib.keys() else 0

            if tcpflag.attrib['name'] == "tcp.flags.cwr":
                tmpFlags['cwr'] = int(tcpflag.attrib['value']) if 'value' in tcpflag.attrib.keys() else 0

            if tcpflag.attrib['name'] == "tcp.flags.ecn":
                tmpFlags['ecn'] = int(tcpflag.attrib['value']) if 'value' in tcpflag.attrib.keys() else 0

            if tcpflag.attrib['name'] == "tcp.flags.urg":
                tmpFlags['urg'] = int(tcpflag.attrib['value']) if 'value' in tcpflag.attrib.keys() else 0

            if tcpflag.attrib['name'] == "tcp.flags.ack":
                tmpFlags['ack'] = int(tcpflag.attrib['value']) if 'value' in tcpflag.attrib.keys() else 0

            if tcpflag.attrib['name'] == "tcp.flags.push":
                tmpFlags['push'] = int(tcpflag.attrib['value']) if 'value' in tcpflag.attrib.keys() else 0

            if tcpflag.attrib['name'] == "tcp.flags.reset":
                tmpFlags['reset'] = int(tcpflag.attrib['value']) if 'value' in tcpflag.attrib.keys() else 0

            if tcpflag.attrib['name'] == "tcp.flags.syn":
                tmpFlags['syn'] = int(tcpflag.attrib['value']) if 'value' in tcpflag.attrib.keys() else 0

            if tcpflag.attrib['name'] == "tcp.flags.fin":
                tmpFlags['fin'] = int(tcpflag.attrib['value']) if 'value' in tcpflag.attrib.keys() else 0

        return tmpFlags



    def __extractFeaturesFromPayload(self, data, features):
        if 'packet' in features.keys() and 'link' in features.keys() and 'network' in features.keys() and 'transport' in features.keys():
            features['payload']= {'size': int(features['packet']['size'] -
                                      features['link']['size'] -
                                      features['network']['size'] -
                                      features['transport']['info']['size'])}
        else:
            features['payload'] = {'size': 0}
